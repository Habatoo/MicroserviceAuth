package com.ssport.exception;

import org.springframework.http.HttpStatus;

public enum ErrorCode {

    USER_ALREADY_EXISTS(HttpStatus.BAD_REQUEST, 4001),
    USER_NOT_FOUND(HttpStatus.BAD_REQUEST, 4002),
    EMAIL_ALREADY_EXISTS(HttpStatus.BAD_REQUEST, 4003),
    INVALID_PASSWORD(HttpStatus.BAD_REQUEST, 4004),
    TIME_EXPIRED(HttpStatus.BAD_REQUEST, 4005),
    CODE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4006),
    NUMBER_OF_ATTEMPTS_EXCEEDED(HttpStatus.BAD_REQUEST, 4007),
    WRONG_CODE(HttpStatus.BAD_REQUEST, 4008),
    INVALID_TOKEN(HttpStatus.BAD_REQUEST, 4009),
    INVALID_PROVIDER(HttpStatus.BAD_REQUEST, 4010),
    DAY_NUMBER_ERROR(HttpStatus.BAD_REQUEST, 4011),
    HOUR_ERROR(HttpStatus.BAD_REQUEST, 4012),
    POPULAR_TIMES_NOT_FOUND(HttpStatus.BAD_REQUEST, 4013),
    ALARM_NOT_FOUND(HttpStatus.BAD_REQUEST, 4014),
    ALARM_ALREADY_EXISTS(HttpStatus.BAD_REQUEST, 4015),
    PLACE_ALREADY_EXISTS(HttpStatus.BAD_REQUEST, 4016),
    PLACE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4017),
    FAVORITE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4018),
    HAPPY_HOUR_IMAGE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4019),
    HAPPY_HOUR_NOT_FOUND(HttpStatus.BAD_REQUEST, 4020),
    FEEDBACK_NOT_FOUND(HttpStatus.BAD_REQUEST, 4021),
    USER_PLACE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4022),
    COUPON_NOT_FOUND(HttpStatus.BAD_REQUEST, 4023),
    ALREADY_PLACE_USER(HttpStatus.BAD_REQUEST, 4024),
    UNEXPECTED_ERROR(HttpStatus.INTERNAL_SERVER_ERROR, 4025),
    FILE_IS_NOT_PICTURE(HttpStatus.BAD_REQUEST, 4026),
    FILE_IS_EMPTY(HttpStatus.BAD_REQUEST, 4027),
    STATUS_NOT_FOUND(HttpStatus.BAD_REQUEST, 4028),
    USERNAME_OR_PASSWORD_ERROR(HttpStatus.BAD_REQUEST, 4029),
    ACCESS_DENIED(HttpStatus.FORBIDDEN, 4030),
    VALIDATION_ERROR(HttpStatus.BAD_REQUEST, 4031),
    EMAIL_IS_NOT_VERIFIED(HttpStatus.BAD_REQUEST, 4032),
    INVALID_ACCESS_TOKEN(HttpStatus.UNAUTHORIZED, 4033),
    ACCESS_TOKEN_EXPIRED(HttpStatus.UNAUTHORIZED, 4034),
    CLIENT_NOT_VALID(HttpStatus.UNAUTHORIZED, 4035),

    POPULAR_TIME_REQUEST_NOT_FOUND(HttpStatus.NOT_FOUND, 4036),
    POPULAR_TIME_REQUEST_NOT_READY(HttpStatus.FOUND, 4037),

    UNPROCESSABLE_ENTITY(HttpStatus.UNPROCESSABLE_ENTITY, 0),
    AUTHORIZATION_ERROR(HttpStatus.BAD_REQUEST, 0),

    INVALID_HAPPY_HOUR_DATA(HttpStatus.BAD_REQUEST, 4038),
    INPUT_FILE_ERROR(HttpStatus.BAD_REQUEST, 4039),
    NO_PLACES_FOUND(HttpStatus.BAD_REQUEST, 4040),
    INVALID_DATE_OR_DATE_FORMAT(HttpStatus.BAD_REQUEST, 4041),

    TOKEN_ALREADY_SUBSCRIBED(HttpStatus.BAD_REQUEST, 4042),
    TOKEN_IS_MISSING(HttpStatus.BAD_REQUEST, 4043),
    HAPPY_HOUR_ACTIVE_ERROR(HttpStatus.BAD_REQUEST, 4044),
    NOTICE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4045),
    INVALID_NOTICE(HttpStatus.BAD_REQUEST, 4046),
    PLACE_TYPE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4047),
    INVALID_TIME_FORMAT(HttpStatus.BAD_REQUEST, 4048),
    COMBINE_PLACE_NOT_FOUND(HttpStatus.BAD_REQUEST, 4049),
    APPLICATION_FOR_PLACE_ALREADY_EXISTS(HttpStatus.BAD_REQUEST, 4050);

    private final HttpStatus httpStatus;

    private final int code;

    ErrorCode(HttpStatus httpStatus, int code) {
        this.httpStatus = httpStatus;
        this.code = code;
    }

    public HttpStatus getHttpStatus() {
        return httpStatus;
    }

    public int getCode() {
        return code;
    }
}
